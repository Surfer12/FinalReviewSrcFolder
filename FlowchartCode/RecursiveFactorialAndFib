### 4.4 Recursion

Recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem.

```java
public static int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}
```

### 4.5 Fibonacci Sequence

Fibonacci sequence

```java
public static int fibonacci(int n) {
    if (n == 0)
        return 0;
    else if (n == 1)
        return 1;
    else
        return fibonacci(n - 1) + fibonacci(n - 2);
}
```

### Example Diagram for Recursion in Factorial and Fibonacci Functions

Below are ASCII art diagrams that visually represent the recursive calls for the factorial and Fibonacci functions. These diagrams can help in understanding how recursion unfolds during the execution of these functions.

#### Factorial Function Diagram
The factorial of a number `n` is the product of all positive integers less than or equal to `n`. The recursive call continues until it reaches the base case where `n` is 0 or 1.

```
factorial(5)
    |
    --> factorial(4)
        |
        --> factorial(3)
            |
            --> factorial(2)
                |
                --> factorial(1)
                    |
                    --> factorial(0)  // Base case: returns 1
```

#### Fibonacci Function Diagram
The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The recursive calls expand until they reach the base cases of `fibonacci(0)` or `fibonacci(1)`.

```
fibonacci(5)
    |
    +--> fibonacci(4)
    |     |
    |     +--> fibonacci(3)
    |     |     |
    |     |     +--> fibonacci(2)
    |     |     |     |
    |     |     |     +--> fibonacci(1)  // Base case: returns 1
    |     |     |     |
    |     |     |     +--> fibonacci(0)  // Base case: returns 0
    |     |     |
    |     |     +--> fibonacci(1)  // Base case: returns 1
    |     |
    |     +--> fibonacci(2)
    |           |
    |           +--> fibonacci(1)  // Base case: returns 1
    |           |
    |           +--> fibonacci(0)  // Base case: returns 0
    |
    +--> fibonacci(3)
          |
          +--> fibonacci(2)
          |     |
          |     +--> fibonacci(1)  // Base case: returns 1
          |     |
          |     +--> fibonacci(0)  // Base case: returns 0
          |
          +--> fibonacci(1)  // Base case: returns 1
```

These diagrams provide a clear visual representation of how recursive functions operate by breaking down a problem into smaller subproblems until they reach a base case, after which the solutions to these subproblems combine to give the solution to the original problem.