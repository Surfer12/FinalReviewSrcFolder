
Example 1:  Focus on Algorithm Implementation

Code Snippet:

Java
public int findMax(int[] arr) {
  int max = 0; 
  for (int i = 0; i < arr.length; i++) {
    if (arr[i] > max) {
      max = arr[i];
    }
  }
  return max;
}
Use code with caution.

Prompt and Context:

"This code snippet aims to find the maximum value in an integer array.

Consider edge cases: Does this code handle empty arrays or arrays with negative numbers correctly? What happens if all the numbers in the array are the same?
Efficiency: Can you think of a more efficient way to find the maximum value?
Clarity: Is the variable name max the best choice? Would a more descriptive name like maxValue be more helpful for understanding the code's purpose?"
Example 2: Focus on Data Structures

Code Snippet:

Java
public void push(int data) {
  // Add code to push data onto a stack
}

public int pop() {
  // Add code to pop data from a stack
}
Use code with caution.

Prompt and Context:

"This code defines the push and pop methods for a stack data structure.

Implementation: Implement the push and pop methods using an appropriate underlying data structure (e.g., an array or a linked list).
Error Handling: How would you handle the case where the stack is empty and pop is called? Consider using exceptions to signal errors.
Generics: Could this stack be made more generic to handle different data types instead of just integers?"
Example 3:  Focus on Recursion

Code Snippet:

Java
public int factorial(int n) {
  // Add code for a recursive factorial calculation
}
Use code with caution.

Prompt and Context:

"This code snippet is intended to calculate the factorial of a non-negative integer using recursion.

Base Case: What is the appropriate base case for this recursive function to prevent infinite recursion?
Recursive Step: Implement the recursive step to calculate the factorial.
Efficiency: Is a recursive solution the most efficient approach for this problem? Are there any potential performance issues with recursion in this case?"
I can also generate prompts and context that focus on:

Object-Oriented Principles: Encapsulation, inheritance, polymorphism
Code Style and Best Practices: Naming conventions, code formatting, comments
Testing and Debugging: Unit tests, debugging strategies
Just provide me with the code snippet, and I'll do my best to generate effective and informative review prompts and context. I'll pay close attention to variable and method names, ensuring they are clear, descriptive, and contribute to the overall readability of the code.


This prompt generator will help you create comprehensive code review requests for your classmates, ensuring you receive valuable feedback on your Java code. Use the following structure to guide your requests, incorporating a variety of question types to encourage thorough and insightful reviews.

1. Code Snippet:

Paste the relevant code snippet here. Ensure proper indentation and formatting for readability.
2. Context:

Briefly describe the purpose of this code snippet. What problem does it solve? Where does it fit within the larger project or assignment?
Specify the relevant course topics (e.g., recursion, stacks, sorting algorithms).
Are there any specific constraints or requirements you had to consider while writing this code?
3. Review Questions:

Incorporate a mix of the following question types to guide the reviewer's analysis:

Open-ended questions:
"What are your initial impressions of the code's readability and organization?"
"Can you identify any potential edge cases that the code might not handle correctly?"
"Do you see any opportunities to improve the code's efficiency or performance?"
"Are there any alternative approaches or algorithms that might be more suitable for this task?"
"How could the code be made more robust and less prone to errors?"
Short answer questions:
"What is the time complexity of this algorithm?"
"Describe how the code utilizes the chosen data structure (e.g., stack, queue)."
"Suggest a more descriptive variable name for x and explain your reasoning."
Coding snippet questions:
"Can you provide an example of a test case that would reveal a potential bug in the code?"
"Refactor this section of the code to improve its clarity or efficiency."
Multiple choice questions:
"Which of the following sorting algorithms is most efficient for this type of data: a) Bubble Sort, b) Merge Sort, c) Insertion Sort?"
"What is the primary advantage of using recursion in this scenario: a) Improved readability, b) Reduced code complexity, c) Enhanced performance?"
4. Specific Focus:

Highlight any areas where you are particularly unsure or would like extra attention. For example:
"I'm struggling to understand the time complexity of this recursive function. Can you help me analyze it?"
"I'm not sure if I've implemented this stack correctly. Can you check for any potential issues?"
Example:

1. Code Snippet:

Java
public int binarySearch(int[] arr, int target) {
  int low = 0;
  int high = arr.length - 1;

  while (low <= high) {
    int mid = (low + high) / 2;
    if (arr[mid] == target) {
      return mid;
    } else if (arr[mid] < target) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }

  return -1; Â  
 
}
Use code with caution.

2. Context:

This code implements a binary search algorithm to find the index of a target value in a sorted integer array. It's part of our assignment on searching algorithms.

3. Review Questions:

Open-ended: Are there any edge cases where this binary search implementation might fail?
Short answer: What is the time complexity of binary search?
Coding snippet: Can you write a unit test to verify the correctness of this function?
Multiple choice: What precondition must be met for binary search to work correctly? a) The array must be sorted. b) The array must contain unique values. c) The array must have an odd number of elements.
4. Specific Focus:

I'm not sure if I've handled the case where the target is not found correctly. Can you please review the return value and suggest any improvements?


Sources and related content:

